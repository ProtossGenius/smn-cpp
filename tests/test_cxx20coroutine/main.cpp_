#define assert(lhs, oper, rhs) \
	if (!(lhs oper rhs)) \
		std::cout << __FILE__ << ":" << __LINE__ << "  " << __func__ << "() : assert error\n\twhen assert: " \
		<< #lhs << "={" << lhs << "}     " << #oper <<"    "<< #rhs << "={"<< rhs << "}" <<  std::endl 
	
#include <iostream>
#include <functional>
#include <thread>
#include <string>
#include <coroutine>
using AsyncResultsCallback = std::function<void(const std::string&)>;
 
// 异步获取结果函数
void async_get_results(AsyncResultsCallback callback) {
    std::thread t([callback]() {
        std::this_thread::sleep_for(std::chrono::seconds(3));   // 模拟耗时的操作
        callback("seconds later");
    });
    t.detach(); // 测试代码，实际项目中不要使用detach
}
 
// 给协程体使用的承诺特征类型
struct Traits
{
    struct promise_type {
        // 协程体被创建时被调用
        auto get_return_object() {
            return Traits{};
        }
 
        // get_return_object之后被调用
        auto initial_suspend() {
            return std::suspend_never{};
        }
 
        // return_void之后被调用
        auto final_suspend() {
            return std::suspend_never{};
        }
 
        void unhandled_exception() {
            std::terminate();
        }
 
        // 协程体执行完之后被调用
        void return_void() {
        }
    };
};
 
// 协程使用的await对象
struct AsyncResultsWaitable
{
    // await是否已经计算完成，如果返回true，则co_await将直接在当前线程返回
    bool await_ready() const {
        return false;
    }
 
    // await对象计算完成之后返回结果
    std::string await_resume() {
        return _result;
    }
 
    // await对象真正调异步执行的地方，异步完成之后通过handle.resume()来是await返回
    void await_suspend(std::coroutine_handle<> handle)
    {
        async_get_results([handle, this] (const std::string& str) {
            _result = str;
            handle.resume();
        });
    }
 
    std::string _result; // 将返回值存在这里
};
 
// 协程体
Traits coroutine_get_results(AsyncResultsCallback callback)
{
    // 这时还在主线程中
    std::cout<<"run at main thread id:"<<std::this_thread::get_id()<<std::endl;
 
    const std::string& ret = co_await AsyncResultsWaitable();
 
    // 这时已经是在子线程中了
    std::cout<<"run at slaver thread id:"<<std::this_thread::get_id()<<std::endl;
    callback(ret);
}

int main(int argc, char *argv[])
{
    // 传统异步获取结果
    async_get_results([] (const std::string& str){
        std::cout<<"async get results: "<<str<<std::endl;
    });
 
    // 通过协程异步获取结果
    coroutine_get_results([] (const std::string& str){
        std::cout<<"coroutine get results: "<<str<<std::endl;
    });
    getchar();
    return 0;
}
